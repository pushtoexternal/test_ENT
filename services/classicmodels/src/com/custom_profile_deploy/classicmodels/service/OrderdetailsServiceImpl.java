/*Copyright (c) 2016-2017 profiles.com All Rights Reserved.
 This software is the confidential and proprietary information of profiles.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with profiles.com*/
package com.custom_profile_deploy.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.custom_profile_deploy.classicmodels.Orderdetails;
import com.custom_profile_deploy.classicmodels.OrderdetailsId;


/**
 * ServiceImpl object for domain model class Orderdetails.
 *
 * @see Orderdetails
 */
@Service("classicmodels.OrderdetailsService")
@Validated
public class OrderdetailsServiceImpl implements OrderdetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderdetailsServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.OrderdetailsDao")
    private WMGenericDao<Orderdetails, OrderdetailsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Orderdetails, OrderdetailsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public Orderdetails create(Orderdetails orderdetails) {
        LOGGER.debug("Creating a new Orderdetails with information: {}", orderdetails);

        Orderdetails orderdetailsCreated = this.wmGenericDao.create(orderdetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(orderdetailsCreated);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Orderdetails getById(OrderdetailsId orderdetailsId) {
        LOGGER.debug("Finding Orderdetails by id: {}", orderdetailsId);
        return this.wmGenericDao.findById(orderdetailsId);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Orderdetails findById(OrderdetailsId orderdetailsId) {
        LOGGER.debug("Finding Orderdetails by id: {}", orderdetailsId);
        try {
            return this.wmGenericDao.findById(orderdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Orderdetails found with id: {}", orderdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public List<Orderdetails> findByMultipleIds(List<OrderdetailsId> orderdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Orderdetails by ids: {}", orderdetailsIds);

        return this.wmGenericDao.findByMultipleIds(orderdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
    @Override
    public Orderdetails update(Orderdetails orderdetails) {
        LOGGER.debug("Updating Orderdetails with information: {}", orderdetails);

        this.wmGenericDao.update(orderdetails);
        this.wmGenericDao.refresh(orderdetails);

        return orderdetails;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public Orderdetails delete(OrderdetailsId orderdetailsId) {
        LOGGER.debug("Deleting Orderdetails with id: {}", orderdetailsId);
        Orderdetails deleted = this.wmGenericDao.findById(orderdetailsId);
        if (deleted == null) {
            LOGGER.debug("No Orderdetails found with id: {}", orderdetailsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Orderdetails.class.getSimpleName(), orderdetailsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public void delete(Orderdetails orderdetails) {
        LOGGER.debug("Deleting Orderdetails with {}", orderdetails);
        this.wmGenericDao.delete(orderdetails);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Orderdetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Orderdetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Orderdetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Orderdetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Orderdetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service classicmodels for table Orderdetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}