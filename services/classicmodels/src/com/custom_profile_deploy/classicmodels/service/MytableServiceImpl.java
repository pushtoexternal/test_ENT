/*Copyright (c) 2016-2017 profiles.com All Rights Reserved.
 This software is the confidential and proprietary information of profiles.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with profiles.com*/
package com.custom_profile_deploy.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.custom_profile_deploy.classicmodels.Mytable;
import com.custom_profile_deploy.classicmodels.MytableId;


/**
 * ServiceImpl object for domain model class Mytable.
 *
 * @see Mytable
 */
@Service("classicmodels.MytableService")
@Validated
public class MytableServiceImpl implements MytableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MytableServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.MytableDao")
    private WMGenericDao<Mytable, MytableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Mytable, MytableId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public Mytable create(Mytable mytable) {
        LOGGER.debug("Creating a new Mytable with information: {}", mytable);

        Mytable mytableCreated = this.wmGenericDao.create(mytable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(mytableCreated);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Mytable getById(MytableId mytableId) {
        LOGGER.debug("Finding Mytable by id: {}", mytableId);
        return this.wmGenericDao.findById(mytableId);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Mytable findById(MytableId mytableId) {
        LOGGER.debug("Finding Mytable by id: {}", mytableId);
        try {
            return this.wmGenericDao.findById(mytableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Mytable found with id: {}", mytableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public List<Mytable> findByMultipleIds(List<MytableId> mytableIds, boolean orderedReturn) {
        LOGGER.debug("Finding Mytables by ids: {}", mytableIds);

        return this.wmGenericDao.findByMultipleIds(mytableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
    @Override
    public Mytable update(Mytable mytable) {
        LOGGER.debug("Updating Mytable with information: {}", mytable);

        this.wmGenericDao.update(mytable);
        this.wmGenericDao.refresh(mytable);

        return mytable;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public Mytable delete(MytableId mytableId) {
        LOGGER.debug("Deleting Mytable with id: {}", mytableId);
        Mytable deleted = this.wmGenericDao.findById(mytableId);
        if (deleted == null) {
            LOGGER.debug("No Mytable found with id: {}", mytableId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Mytable.class.getSimpleName(), mytableId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public void delete(Mytable mytable) {
        LOGGER.debug("Deleting Mytable with {}", mytable);
        this.wmGenericDao.delete(mytable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Mytable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Mytables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Mytable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Mytables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Mytable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service classicmodels for table Mytable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}